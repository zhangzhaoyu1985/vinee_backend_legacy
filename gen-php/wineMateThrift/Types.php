<?php
namespace wineMateThrift;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RegistrationStatus {
  const REGISTRATION_SUCCESS = 1;
  const REGISTRATION_DUPLICATE_USERNAME = 2;
  const REGISTRATION_DUPLICATE_EMAIL = 3;
  const REGISTRATION_INVALID_INPUT = 4;
  static public $__names = array(
    1 => 'REGISTRATION_SUCCESS',
    2 => 'REGISTRATION_DUPLICATE_USERNAME',
    3 => 'REGISTRATION_DUPLICATE_EMAIL',
    4 => 'REGISTRATION_INVALID_INPUT',
  );
}

final class FindPasswordStatus {
  const PW_SUCCESS = 1;
  const PW_FAILED = 2;
  static public $__names = array(
    1 => 'PW_SUCCESS',
    2 => 'PW_FAILED',
  );
}

final class LoginStatus {
  const LOGIN_SUCCESS = 1;
  const LOGIN_FAILED = 2;
  const LOGIN_UNACTIVATED = 3;
  static public $__names = array(
    1 => 'LOGIN_SUCCESS',
    2 => 'LOGIN_FAILED',
    3 => 'LOGIN_UNACTIVATED',
  );
}

final class ThirdParty {
  const NONE = 0;
  const WECHAT = 1;
  static public $__names = array(
    0 => 'NONE',
    1 => 'WECHAT',
  );
}

final class CountryId {
  const ENGLISH = 1;
  const CHINESE = 2;
  static public $__names = array(
    1 => 'ENGLISH',
    2 => 'CHINESE',
  );
}

final class ReviewerSex {
  const MALE = 1;
  const FEMALE = 2;
  static public $__names = array(
    1 => 'MALE',
    2 => 'FEMALE',
  );
}

final class FeedType {
  const SYSTEMFEED = 1;
  const USERFEED = 2;
  const USERRATE = 3;
  static public $__names = array(
    1 => 'SYSTEMFEED',
    2 => 'USERFEED',
    3 => 'USERRATE',
  );
}

final class UserActions {
  const ShareWineInfoToWechat = 1;
  const OpenedBottle = 2;
  const ShareWineryInfoToWechat = 3;
  const ShareWineryMemberShipToWechat = 4;
  static public $__names = array(
    1 => 'ShareWineInfoToWechat',
    2 => 'OpenedBottle',
    3 => 'ShareWineryInfoToWechat',
    4 => 'ShareWineryMemberShipToWechat',
  );
}

final class AddRewardPointsResponse {
  const Success = 1;
  const AlreadyEarned = 2;
  static public $__names = array(
    1 => 'Success',
    2 => 'AlreadyEarned',
  );
}

final class RewardRedeemResponseCode {
  const SUCCESS = 1;
  const FAILED = 2;
  const ACCOUNT_UNACTIVATED = 3;
  static public $__names = array(
    1 => 'SUCCESS',
    2 => 'FAILED',
    3 => 'ACCOUNT_UNACTIVATED',
  );
}

class LoginResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'LoginResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginResult');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class User {
  static $_TSPEC;

  /**
   * @var string
   */
  public $userName = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $lastName = null;
  /**
   * @var string
   */
  public $firstName = null;
  /**
   * @var string
   */
  public $sex = null;
  /**
   * @var int
   */
  public $age = null;
  /**
   * @var int
   */
  public $yearOfBirth = null;
  /**
   * @var int
   */
  public $monthOfBirth = null;
  /**
   * @var int
   */
  public $dayOfBirth = null;
  /**
   * @var int
   */
  public $rewardPoints = null;
  /**
   * @var string
   */
  public $photoUrl = null;
  /**
   * @var int
   */
  public $thirdParty = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lastName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'firstName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sex',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'age',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'yearOfBirth',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'monthOfBirth',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'dayOfBirth',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'rewardPoints',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'photoUrl',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'thirdParty',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['lastName'])) {
        $this->lastName = $vals['lastName'];
      }
      if (isset($vals['firstName'])) {
        $this->firstName = $vals['firstName'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['age'])) {
        $this->age = $vals['age'];
      }
      if (isset($vals['yearOfBirth'])) {
        $this->yearOfBirth = $vals['yearOfBirth'];
      }
      if (isset($vals['monthOfBirth'])) {
        $this->monthOfBirth = $vals['monthOfBirth'];
      }
      if (isset($vals['dayOfBirth'])) {
        $this->dayOfBirth = $vals['dayOfBirth'];
      }
      if (isset($vals['rewardPoints'])) {
        $this->rewardPoints = $vals['rewardPoints'];
      }
      if (isset($vals['photoUrl'])) {
        $this->photoUrl = $vals['photoUrl'];
      }
      if (isset($vals['thirdParty'])) {
        $this->thirdParty = $vals['thirdParty'];
      }
    }
  }

  public function getName() {
    return 'User';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->firstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->age);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yearOfBirth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->monthOfBirth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dayOfBirth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardPoints);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->thirdParty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('User');
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 1);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastName !== null) {
      $xfer += $output->writeFieldBegin('lastName', TType::STRING, 4);
      $xfer += $output->writeString($this->lastName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstName !== null) {
      $xfer += $output->writeFieldBegin('firstName', TType::STRING, 5);
      $xfer += $output->writeString($this->firstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::STRING, 6);
      $xfer += $output->writeString($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age !== null) {
      $xfer += $output->writeFieldBegin('age', TType::I32, 7);
      $xfer += $output->writeI32($this->age);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yearOfBirth !== null) {
      $xfer += $output->writeFieldBegin('yearOfBirth', TType::I32, 8);
      $xfer += $output->writeI32($this->yearOfBirth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->monthOfBirth !== null) {
      $xfer += $output->writeFieldBegin('monthOfBirth', TType::I32, 9);
      $xfer += $output->writeI32($this->monthOfBirth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dayOfBirth !== null) {
      $xfer += $output->writeFieldBegin('dayOfBirth', TType::I32, 10);
      $xfer += $output->writeI32($this->dayOfBirth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardPoints !== null) {
      $xfer += $output->writeFieldBegin('rewardPoints', TType::I32, 11);
      $xfer += $output->writeI32($this->rewardPoints);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoUrl !== null) {
      $xfer += $output->writeFieldBegin('photoUrl', TType::STRING, 12);
      $xfer += $output->writeString($this->photoUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thirdParty !== null) {
      $xfer += $output->writeFieldBegin('thirdParty', TType::I32, 13);
      $xfer += $output->writeI32($this->thirdParty);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TagInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tagID = null;
  /**
   * @var string
   */
  public $secretNumber = null;
  /**
   * @var int
   */
  public $countryId = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var string
   */
  public $time = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $detailedLocation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tagID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'secretNumber',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'countryId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'detailedLocation',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tagID'])) {
        $this->tagID = $vals['tagID'];
      }
      if (isset($vals['secretNumber'])) {
        $this->secretNumber = $vals['secretNumber'];
      }
      if (isset($vals['countryId'])) {
        $this->countryId = $vals['countryId'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['detailedLocation'])) {
        $this->detailedLocation = $vals['detailedLocation'];
      }
    }
  }

  public function getName() {
    return 'TagInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tagID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secretNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detailedLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TagInfo');
    if ($this->tagID !== null) {
      $xfer += $output->writeFieldBegin('tagID', TType::STRING, 1);
      $xfer += $output->writeString($this->tagID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secretNumber !== null) {
      $xfer += $output->writeFieldBegin('secretNumber', TType::STRING, 2);
      $xfer += $output->writeString($this->secretNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryId !== null) {
      $xfer += $output->writeFieldBegin('countryId', TType::I32, 3);
      $xfer += $output->writeI32($this->countryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 4);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 5);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 6);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detailedLocation !== null) {
      $xfer += $output->writeFieldBegin('detailedLocation', TType::STRING, 7);
      $xfer += $output->writeString($this->detailedLocation);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineInfo {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $isGenuine = null;
  /**
   * @var bool
   */
  public $isSealed = null;
  /**
   * @var string
   */
  public $wineName = null;
  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var string
   */
  public $winePicURL = null;
  /**
   * @var double
   */
  public $wineRate = null;
  /**
   * @var string
   */
  public $openedTime = null;
  /**
   * @var string
   */
  public $wineryName = null;
  /**
   * @var string
   */
  public $regionName = null;
  /**
   * @var string
   */
  public $year = null;
  /**
   * @var string
   */
  public $openedCity = null;
  /**
   * @var string
   */
  public $openedCountry = null;
  /**
   * @var string
   */
  public $wechatShareUrl = null;
  /**
   * @var int
   */
  public $rewardPoint = null;
  /**
   * @var string
   */
  public $wineryLogoPicUrl = null;
  /**
   * @var string
   */
  public $wineryNationalFlagUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isGenuine',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'isSealed',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'wineName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'winePicURL',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'wineRate',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'openedTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'wineryName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'regionName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'year',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'openedCity',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'openedCountry',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'wechatShareUrl',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'rewardPoint',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'wineryLogoPicUrl',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'wineryNationalFlagUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isGenuine'])) {
        $this->isGenuine = $vals['isGenuine'];
      }
      if (isset($vals['isSealed'])) {
        $this->isSealed = $vals['isSealed'];
      }
      if (isset($vals['wineName'])) {
        $this->wineName = $vals['wineName'];
      }
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['winePicURL'])) {
        $this->winePicURL = $vals['winePicURL'];
      }
      if (isset($vals['wineRate'])) {
        $this->wineRate = $vals['wineRate'];
      }
      if (isset($vals['openedTime'])) {
        $this->openedTime = $vals['openedTime'];
      }
      if (isset($vals['wineryName'])) {
        $this->wineryName = $vals['wineryName'];
      }
      if (isset($vals['regionName'])) {
        $this->regionName = $vals['regionName'];
      }
      if (isset($vals['year'])) {
        $this->year = $vals['year'];
      }
      if (isset($vals['openedCity'])) {
        $this->openedCity = $vals['openedCity'];
      }
      if (isset($vals['openedCountry'])) {
        $this->openedCountry = $vals['openedCountry'];
      }
      if (isset($vals['wechatShareUrl'])) {
        $this->wechatShareUrl = $vals['wechatShareUrl'];
      }
      if (isset($vals['rewardPoint'])) {
        $this->rewardPoint = $vals['rewardPoint'];
      }
      if (isset($vals['wineryLogoPicUrl'])) {
        $this->wineryLogoPicUrl = $vals['wineryLogoPicUrl'];
      }
      if (isset($vals['wineryNationalFlagUrl'])) {
        $this->wineryNationalFlagUrl = $vals['wineryNationalFlagUrl'];
      }
    }
  }

  public function getName() {
    return 'WineInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isGenuine);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSealed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->winePicURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->wineRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openedCity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openedCountry);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wechatShareUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryLogoPicUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryNationalFlagUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineInfo');
    if ($this->isGenuine !== null) {
      $xfer += $output->writeFieldBegin('isGenuine', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isGenuine);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSealed !== null) {
      $xfer += $output->writeFieldBegin('isSealed', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isSealed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineName !== null) {
      $xfer += $output->writeFieldBegin('wineName', TType::STRING, 3);
      $xfer += $output->writeString($this->wineName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 4);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->winePicURL !== null) {
      $xfer += $output->writeFieldBegin('winePicURL', TType::STRING, 5);
      $xfer += $output->writeString($this->winePicURL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineRate !== null) {
      $xfer += $output->writeFieldBegin('wineRate', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->wineRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openedTime !== null) {
      $xfer += $output->writeFieldBegin('openedTime', TType::STRING, 7);
      $xfer += $output->writeString($this->openedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryName !== null) {
      $xfer += $output->writeFieldBegin('wineryName', TType::STRING, 8);
      $xfer += $output->writeString($this->wineryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionName !== null) {
      $xfer += $output->writeFieldBegin('regionName', TType::STRING, 9);
      $xfer += $output->writeString($this->regionName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->year !== null) {
      $xfer += $output->writeFieldBegin('year', TType::STRING, 10);
      $xfer += $output->writeString($this->year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openedCity !== null) {
      $xfer += $output->writeFieldBegin('openedCity', TType::STRING, 11);
      $xfer += $output->writeString($this->openedCity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openedCountry !== null) {
      $xfer += $output->writeFieldBegin('openedCountry', TType::STRING, 12);
      $xfer += $output->writeString($this->openedCountry);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wechatShareUrl !== null) {
      $xfer += $output->writeFieldBegin('wechatShareUrl', TType::STRING, 13);
      $xfer += $output->writeString($this->wechatShareUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardPoint !== null) {
      $xfer += $output->writeFieldBegin('rewardPoint', TType::I32, 14);
      $xfer += $output->writeI32($this->rewardPoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryLogoPicUrl !== null) {
      $xfer += $output->writeFieldBegin('wineryLogoPicUrl', TType::STRING, 15);
      $xfer += $output->writeString($this->wineryLogoPicUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryNationalFlagUrl !== null) {
      $xfer += $output->writeFieldBegin('wineryNationalFlagUrl', TType::STRING, 16);
      $xfer += $output->writeString($this->wineryNationalFlagUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BottleOpenInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tagId = null;
  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $bottleOpenIdentifier = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var string
   */
  public $time = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $detailedLocation = null;
  /**
   * @var string
   */
  public $country = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tagId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'bottleOpenIdentifier',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'detailedLocation',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tagId'])) {
        $this->tagId = $vals['tagId'];
      }
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['bottleOpenIdentifier'])) {
        $this->bottleOpenIdentifier = $vals['bottleOpenIdentifier'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['detailedLocation'])) {
        $this->detailedLocation = $vals['detailedLocation'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
    }
  }

  public function getName() {
    return 'BottleOpenInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tagId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bottleOpenIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detailedLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BottleOpenInfo');
    if ($this->tagId !== null) {
      $xfer += $output->writeFieldBegin('tagId', TType::STRING, 1);
      $xfer += $output->writeString($this->tagId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 2);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bottleOpenIdentifier !== null) {
      $xfer += $output->writeFieldBegin('bottleOpenIdentifier', TType::STRING, 4);
      $xfer += $output->writeString($this->bottleOpenIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 5);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 6);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 7);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detailedLocation !== null) {
      $xfer += $output->writeFieldBegin('detailedLocation', TType::STRING, 8);
      $xfer += $output->writeString($this->detailedLocation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 9);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FoodParingPics {
  static $_TSPEC;

  /**
   * @var string
   */
  public $picName = null;
  /**
   * @var string
   */
  public $picUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'picName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'picUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['picName'])) {
        $this->picName = $vals['picName'];
      }
      if (isset($vals['picUrl'])) {
        $this->picUrl = $vals['picUrl'];
      }
    }
  }

  public function getName() {
    return 'FoodParingPics';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FoodParingPics');
    if ($this->picName !== null) {
      $xfer += $output->writeFieldBegin('picName', TType::STRING, 1);
      $xfer += $output->writeString($this->picName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picUrl !== null) {
      $xfer += $output->writeFieldBegin('picUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->picUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineBasicInfoRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var int
   */
  public $countryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'countryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['countryId'])) {
        $this->countryId = $vals['countryId'];
      }
    }
  }

  public function getName() {
    return 'WineBasicInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineBasicInfoRequest');
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 1);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryId !== null) {
      $xfer += $output->writeFieldBegin('countryId', TType::I32, 2);
      $xfer += $output->writeI32($this->countryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineBasicInfoResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $wineName = null;
  /**
   * @var string
   */
  public $wineryName = null;
  /**
   * @var string
   */
  public $location = null;
  /**
   * @var string
   */
  public $nationalFlagUrl = null;
  /**
   * @var string
   */
  public $theWineInfo = null;
  /**
   * @var string
   */
  public $foodPairingInfo = null;
  /**
   * @var string
   */
  public $cellaringInfo = null;
  /**
   * @var \wineMateThrift\FoodParingPics[]
   */
  public $foodParingPics = null;
  /**
   * @var string
   */
  public $regionName = null;
  /**
   * @var string
   */
  public $regionInfo = null;
  /**
   * @var string
   */
  public $wineryWebsiteUrl = null;
  /**
   * @var string
   */
  public $wineryLogoPicUrl = null;
  /**
   * @var string
   */
  public $grapeInfo = null;
  /**
   * @var string
   */
  public $averagePrice = null;
  /**
   * @var string
   */
  public $wechatShareUrl = null;
  /**
   * @var string
   */
  public $year = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'wineryName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'nationalFlagUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'theWineInfo',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'foodPairingInfo',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cellaringInfo',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'foodParingPics',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\FoodParingPics',
            ),
          ),
        9 => array(
          'var' => 'regionName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'regionInfo',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'wineryWebsiteUrl',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'wineryLogoPicUrl',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'grapeInfo',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'averagePrice',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'wechatShareUrl',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'year',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineName'])) {
        $this->wineName = $vals['wineName'];
      }
      if (isset($vals['wineryName'])) {
        $this->wineryName = $vals['wineryName'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['nationalFlagUrl'])) {
        $this->nationalFlagUrl = $vals['nationalFlagUrl'];
      }
      if (isset($vals['theWineInfo'])) {
        $this->theWineInfo = $vals['theWineInfo'];
      }
      if (isset($vals['foodPairingInfo'])) {
        $this->foodPairingInfo = $vals['foodPairingInfo'];
      }
      if (isset($vals['cellaringInfo'])) {
        $this->cellaringInfo = $vals['cellaringInfo'];
      }
      if (isset($vals['foodParingPics'])) {
        $this->foodParingPics = $vals['foodParingPics'];
      }
      if (isset($vals['regionName'])) {
        $this->regionName = $vals['regionName'];
      }
      if (isset($vals['regionInfo'])) {
        $this->regionInfo = $vals['regionInfo'];
      }
      if (isset($vals['wineryWebsiteUrl'])) {
        $this->wineryWebsiteUrl = $vals['wineryWebsiteUrl'];
      }
      if (isset($vals['wineryLogoPicUrl'])) {
        $this->wineryLogoPicUrl = $vals['wineryLogoPicUrl'];
      }
      if (isset($vals['grapeInfo'])) {
        $this->grapeInfo = $vals['grapeInfo'];
      }
      if (isset($vals['averagePrice'])) {
        $this->averagePrice = $vals['averagePrice'];
      }
      if (isset($vals['wechatShareUrl'])) {
        $this->wechatShareUrl = $vals['wechatShareUrl'];
      }
      if (isset($vals['year'])) {
        $this->year = $vals['year'];
      }
    }
  }

  public function getName() {
    return 'WineBasicInfoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nationalFlagUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->theWineInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->foodPairingInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cellaringInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->foodParingPics = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \wineMateThrift\FoodParingPics();
              $xfer += $elem5->read($input);
              $this->foodParingPics []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryWebsiteUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryLogoPicUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->grapeInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->averagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wechatShareUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineBasicInfoResponse');
    if ($this->wineName !== null) {
      $xfer += $output->writeFieldBegin('wineName', TType::STRING, 1);
      $xfer += $output->writeString($this->wineName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryName !== null) {
      $xfer += $output->writeFieldBegin('wineryName', TType::STRING, 2);
      $xfer += $output->writeString($this->wineryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 3);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nationalFlagUrl !== null) {
      $xfer += $output->writeFieldBegin('nationalFlagUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->nationalFlagUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->theWineInfo !== null) {
      $xfer += $output->writeFieldBegin('theWineInfo', TType::STRING, 5);
      $xfer += $output->writeString($this->theWineInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->foodPairingInfo !== null) {
      $xfer += $output->writeFieldBegin('foodPairingInfo', TType::STRING, 6);
      $xfer += $output->writeString($this->foodPairingInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cellaringInfo !== null) {
      $xfer += $output->writeFieldBegin('cellaringInfo', TType::STRING, 7);
      $xfer += $output->writeString($this->cellaringInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->foodParingPics !== null) {
      if (!is_array($this->foodParingPics)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('foodParingPics', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->foodParingPics));
        {
          foreach ($this->foodParingPics as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionName !== null) {
      $xfer += $output->writeFieldBegin('regionName', TType::STRING, 9);
      $xfer += $output->writeString($this->regionName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionInfo !== null) {
      $xfer += $output->writeFieldBegin('regionInfo', TType::STRING, 10);
      $xfer += $output->writeString($this->regionInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryWebsiteUrl !== null) {
      $xfer += $output->writeFieldBegin('wineryWebsiteUrl', TType::STRING, 11);
      $xfer += $output->writeString($this->wineryWebsiteUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryLogoPicUrl !== null) {
      $xfer += $output->writeFieldBegin('wineryLogoPicUrl', TType::STRING, 12);
      $xfer += $output->writeString($this->wineryLogoPicUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grapeInfo !== null) {
      $xfer += $output->writeFieldBegin('grapeInfo', TType::STRING, 13);
      $xfer += $output->writeString($this->grapeInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->averagePrice !== null) {
      $xfer += $output->writeFieldBegin('averagePrice', TType::STRING, 14);
      $xfer += $output->writeString($this->averagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wechatShareUrl !== null) {
      $xfer += $output->writeFieldBegin('wechatShareUrl', TType::STRING, 15);
      $xfer += $output->writeString($this->wechatShareUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->year !== null) {
      $xfer += $output->writeFieldBegin('year', TType::STRING, 16);
      $xfer += $output->writeString($this->year);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineReviewAndRatingReadRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'WineReviewAndRatingReadRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineReviewAndRatingReadRequest');
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 1);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineReviewAndRatingData {
  static $_TSPEC;

  /**
   * @var string
   */
  public $reviewerUserName = null;
  /**
   * @var double
   */
  public $rate = null;
  /**
   * @var string
   */
  public $timeElapsed = null;
  /**
   * @var string
   */
  public $reviewContent = null;
  /**
   * @var int
   */
  public $sex = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var bool
   */
  public $isFollowed = null;
  /**
   * @var bool
   */
  public $isMyFriend = null;
  /**
   * @var string
   */
  public $photoUrl = null;
  /**
   * @var int
   */
  public $thirdParty = null;
  /**
   * @var string
   */
  public $reviewerFirstName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'reviewerUserName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rate',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'timeElapsed',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reviewContent',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sex',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'isFollowed',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'isMyFriend',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'photoUrl',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'thirdParty',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'reviewerFirstName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['reviewerUserName'])) {
        $this->reviewerUserName = $vals['reviewerUserName'];
      }
      if (isset($vals['rate'])) {
        $this->rate = $vals['rate'];
      }
      if (isset($vals['timeElapsed'])) {
        $this->timeElapsed = $vals['timeElapsed'];
      }
      if (isset($vals['reviewContent'])) {
        $this->reviewContent = $vals['reviewContent'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['isFollowed'])) {
        $this->isFollowed = $vals['isFollowed'];
      }
      if (isset($vals['isMyFriend'])) {
        $this->isMyFriend = $vals['isMyFriend'];
      }
      if (isset($vals['photoUrl'])) {
        $this->photoUrl = $vals['photoUrl'];
      }
      if (isset($vals['thirdParty'])) {
        $this->thirdParty = $vals['thirdParty'];
      }
      if (isset($vals['reviewerFirstName'])) {
        $this->reviewerFirstName = $vals['reviewerFirstName'];
      }
    }
  }

  public function getName() {
    return 'WineReviewAndRatingData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewerUserName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timeElapsed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFollowed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isMyFriend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->thirdParty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewerFirstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineReviewAndRatingData');
    if ($this->reviewerUserName !== null) {
      $xfer += $output->writeFieldBegin('reviewerUserName', TType::STRING, 1);
      $xfer += $output->writeString($this->reviewerUserName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rate !== null) {
      $xfer += $output->writeFieldBegin('rate', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeElapsed !== null) {
      $xfer += $output->writeFieldBegin('timeElapsed', TType::STRING, 3);
      $xfer += $output->writeString($this->timeElapsed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewContent !== null) {
      $xfer += $output->writeFieldBegin('reviewContent', TType::STRING, 4);
      $xfer += $output->writeString($this->reviewContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::I32, 5);
      $xfer += $output->writeI32($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 6);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFollowed !== null) {
      $xfer += $output->writeFieldBegin('isFollowed', TType::BOOL, 7);
      $xfer += $output->writeBool($this->isFollowed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isMyFriend !== null) {
      $xfer += $output->writeFieldBegin('isMyFriend', TType::BOOL, 8);
      $xfer += $output->writeBool($this->isMyFriend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoUrl !== null) {
      $xfer += $output->writeFieldBegin('photoUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->photoUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thirdParty !== null) {
      $xfer += $output->writeFieldBegin('thirdParty', TType::I32, 10);
      $xfer += $output->writeI32($this->thirdParty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewerFirstName !== null) {
      $xfer += $output->writeFieldBegin('reviewerFirstName', TType::STRING, 11);
      $xfer += $output->writeString($this->reviewerFirstName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineReviewAndRatingReadResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\WineReviewAndRatingData[]
   */
  public $data = null;
  /**
   * @var int
   */
  public $numOfRating = null;
  /**
   * @var int
   */
  public $numOfReview = null;
  /**
   * @var double
   */
  public $averageRate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\WineReviewAndRatingData',
            ),
          ),
        2 => array(
          'var' => 'numOfRating',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'numOfReview',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'averageRate',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['numOfRating'])) {
        $this->numOfRating = $vals['numOfRating'];
      }
      if (isset($vals['numOfReview'])) {
        $this->numOfReview = $vals['numOfReview'];
      }
      if (isset($vals['averageRate'])) {
        $this->averageRate = $vals['averageRate'];
      }
    }
  }

  public function getName() {
    return 'WineReviewAndRatingReadResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \wineMateThrift\WineReviewAndRatingData();
              $xfer += $elem12->read($input);
              $this->data []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->numOfRating);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->numOfReview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->averageRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineReviewAndRatingReadResponse');
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numOfRating !== null) {
      $xfer += $output->writeFieldBegin('numOfRating', TType::I32, 2);
      $xfer += $output->writeI32($this->numOfRating);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numOfReview !== null) {
      $xfer += $output->writeFieldBegin('numOfReview', TType::I32, 3);
      $xfer += $output->writeI32($this->numOfReview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->averageRate !== null) {
      $xfer += $output->writeFieldBegin('averageRate', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->averageRate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineReviewAndRatingWriteRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var double
   */
  public $score = null;
  /**
   * @var string
   */
  public $reviewContent = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var string
   */
  public $time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'score',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'reviewContent',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['reviewContent'])) {
        $this->reviewContent = $vals['reviewContent'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
    }
  }

  public function getName() {
    return 'WineReviewAndRatingWriteRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineReviewAndRatingWriteRequest');
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 1);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewContent !== null) {
      $xfer += $output->writeFieldBegin('reviewContent', TType::STRING, 4);
      $xfer += $output->writeString($this->reviewContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 5);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 6);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineReviewAndRatingWriteResponse {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $isSuccess = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
    }
  }

  public function getName() {
    return 'WineReviewAndRatingWriteResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineReviewAndRatingWriteResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyRateRecordRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $wineId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
    }
  }

  public function getName() {
    return 'MyRateRecordRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyRateRecordRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 2);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyRateRecordResponse {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $alreadyRated = null;
  /**
   * @var double
   */
  public $myRate = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'alreadyRated',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'myRate',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['alreadyRated'])) {
        $this->alreadyRated = $vals['alreadyRated'];
      }
      if (isset($vals['myRate'])) {
        $this->myRate = $vals['myRate'];
      }
    }
  }

  public function getName() {
    return 'MyRateRecordResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->alreadyRated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->myRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyRateRecordResponse');
    if ($this->alreadyRated !== null) {
      $xfer += $output->writeFieldBegin('alreadyRated', TType::BOOL, 1);
      $xfer += $output->writeBool($this->alreadyRated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myRate !== null) {
      $xfer += $output->writeFieldBegin('myRate', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->myRate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BottleInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var string
   */
  public $wineName = null;
  /**
   * @var string
   */
  public $regionName = null;
  /**
   * @var string
   */
  public $openDate = null;
  /**
   * @var string
   */
  public $openTime = null;
  /**
   * @var string
   */
  public $openCity = null;
  /**
   * @var string
   */
  public $winePicUrl = null;
  /**
   * @var string
   */
  public $nationalFlagUrl = null;
  /**
   * @var double
   */
  public $myRate = 0;
  /**
   * @var string
   */
  public $year = null;
  /**
   * @var string
   */
  public $wineryName = null;
  /**
   * @var double
   */
  public $averageRate = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'wineName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'regionName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'openDate',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'openTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'openCity',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'winePicUrl',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'nationalFlagUrl',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'myRate',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'year',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'wineryName',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'averageRate',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['wineName'])) {
        $this->wineName = $vals['wineName'];
      }
      if (isset($vals['regionName'])) {
        $this->regionName = $vals['regionName'];
      }
      if (isset($vals['openDate'])) {
        $this->openDate = $vals['openDate'];
      }
      if (isset($vals['openTime'])) {
        $this->openTime = $vals['openTime'];
      }
      if (isset($vals['openCity'])) {
        $this->openCity = $vals['openCity'];
      }
      if (isset($vals['winePicUrl'])) {
        $this->winePicUrl = $vals['winePicUrl'];
      }
      if (isset($vals['nationalFlagUrl'])) {
        $this->nationalFlagUrl = $vals['nationalFlagUrl'];
      }
      if (isset($vals['myRate'])) {
        $this->myRate = $vals['myRate'];
      }
      if (isset($vals['year'])) {
        $this->year = $vals['year'];
      }
      if (isset($vals['wineryName'])) {
        $this->wineryName = $vals['wineryName'];
      }
      if (isset($vals['averageRate'])) {
        $this->averageRate = $vals['averageRate'];
      }
    }
  }

  public function getName() {
    return 'BottleInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openCity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->winePicUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nationalFlagUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->myRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->averageRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BottleInfo');
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 1);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineName !== null) {
      $xfer += $output->writeFieldBegin('wineName', TType::STRING, 2);
      $xfer += $output->writeString($this->wineName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionName !== null) {
      $xfer += $output->writeFieldBegin('regionName', TType::STRING, 3);
      $xfer += $output->writeString($this->regionName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openDate !== null) {
      $xfer += $output->writeFieldBegin('openDate', TType::STRING, 4);
      $xfer += $output->writeString($this->openDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openTime !== null) {
      $xfer += $output->writeFieldBegin('openTime', TType::STRING, 5);
      $xfer += $output->writeString($this->openTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openCity !== null) {
      $xfer += $output->writeFieldBegin('openCity', TType::STRING, 6);
      $xfer += $output->writeString($this->openCity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->winePicUrl !== null) {
      $xfer += $output->writeFieldBegin('winePicUrl', TType::STRING, 7);
      $xfer += $output->writeString($this->winePicUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nationalFlagUrl !== null) {
      $xfer += $output->writeFieldBegin('nationalFlagUrl', TType::STRING, 8);
      $xfer += $output->writeString($this->nationalFlagUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myRate !== null) {
      $xfer += $output->writeFieldBegin('myRate', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->myRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->year !== null) {
      $xfer += $output->writeFieldBegin('year', TType::STRING, 10);
      $xfer += $output->writeString($this->year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryName !== null) {
      $xfer += $output->writeFieldBegin('wineryName', TType::STRING, 11);
      $xfer += $output->writeString($this->wineryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->averageRate !== null) {
      $xfer += $output->writeFieldBegin('averageRate', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->averageRate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyBottlesRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $countryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'countryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['countryId'])) {
        $this->countryId = $vals['countryId'];
      }
    }
  }

  public function getName() {
    return 'MyBottlesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyBottlesRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryId !== null) {
      $xfer += $output->writeFieldBegin('countryId', TType::I32, 2);
      $xfer += $output->writeI32($this->countryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OpenedBottlesResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $openedNumber = null;
  /**
   * @var int
   */
  public $ratedNumber = null;
  /**
   * @var int
   */
  public $scannedNumber = null;
  /**
   * @var int
   */
  public $wishListSize = null;
  /**
   * @var int
   */
  public $totalWinesNumber = null;
  /**
   * @var int
   */
  public $sex = null;
  /**
   * @var \wineMateThrift\BottleInfo
   */
  public $currentOpenedBottleInfo = null;
  /**
   * @var \wineMateThrift\BottleInfo[]
   */
  public $openedBottleHistory = null;
  /**
   * @var string
   */
  public $photoUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openedNumber',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ratedNumber',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'scannedNumber',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'wishListSize',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'totalWinesNumber',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'sex',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'currentOpenedBottleInfo',
          'type' => TType::STRUCT,
          'class' => '\wineMateThrift\BottleInfo',
          ),
        8 => array(
          'var' => 'openedBottleHistory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\BottleInfo',
            ),
          ),
        9 => array(
          'var' => 'photoUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openedNumber'])) {
        $this->openedNumber = $vals['openedNumber'];
      }
      if (isset($vals['ratedNumber'])) {
        $this->ratedNumber = $vals['ratedNumber'];
      }
      if (isset($vals['scannedNumber'])) {
        $this->scannedNumber = $vals['scannedNumber'];
      }
      if (isset($vals['wishListSize'])) {
        $this->wishListSize = $vals['wishListSize'];
      }
      if (isset($vals['totalWinesNumber'])) {
        $this->totalWinesNumber = $vals['totalWinesNumber'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['currentOpenedBottleInfo'])) {
        $this->currentOpenedBottleInfo = $vals['currentOpenedBottleInfo'];
      }
      if (isset($vals['openedBottleHistory'])) {
        $this->openedBottleHistory = $vals['openedBottleHistory'];
      }
      if (isset($vals['photoUrl'])) {
        $this->photoUrl = $vals['photoUrl'];
      }
    }
  }

  public function getName() {
    return 'OpenedBottlesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openedNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ratedNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scannedNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wishListSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalWinesNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->currentOpenedBottleInfo = new \wineMateThrift\BottleInfo();
            $xfer += $this->currentOpenedBottleInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->openedBottleHistory = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \wineMateThrift\BottleInfo();
              $xfer += $elem19->read($input);
              $this->openedBottleHistory []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OpenedBottlesResponse');
    if ($this->openedNumber !== null) {
      $xfer += $output->writeFieldBegin('openedNumber', TType::I32, 1);
      $xfer += $output->writeI32($this->openedNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ratedNumber !== null) {
      $xfer += $output->writeFieldBegin('ratedNumber', TType::I32, 2);
      $xfer += $output->writeI32($this->ratedNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scannedNumber !== null) {
      $xfer += $output->writeFieldBegin('scannedNumber', TType::I32, 3);
      $xfer += $output->writeI32($this->scannedNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wishListSize !== null) {
      $xfer += $output->writeFieldBegin('wishListSize', TType::I32, 4);
      $xfer += $output->writeI32($this->wishListSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalWinesNumber !== null) {
      $xfer += $output->writeFieldBegin('totalWinesNumber', TType::I32, 5);
      $xfer += $output->writeI32($this->totalWinesNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::I32, 6);
      $xfer += $output->writeI32($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentOpenedBottleInfo !== null) {
      if (!is_object($this->currentOpenedBottleInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('currentOpenedBottleInfo', TType::STRUCT, 7);
      $xfer += $this->currentOpenedBottleInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openedBottleHistory !== null) {
      if (!is_array($this->openedBottleHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('openedBottleHistory', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->openedBottleHistory));
        {
          foreach ($this->openedBottleHistory as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoUrl !== null) {
      $xfer += $output->writeFieldBegin('photoUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->photoUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ScannedBottlesResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\BottleInfo[]
   */
  public $scannedBottleHistory = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scannedBottleHistory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\BottleInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['scannedBottleHistory'])) {
        $this->scannedBottleHistory = $vals['scannedBottleHistory'];
      }
    }
  }

  public function getName() {
    return 'ScannedBottlesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->scannedBottleHistory = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \wineMateThrift\BottleInfo();
              $xfer += $elem26->read($input);
              $this->scannedBottleHistory []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScannedBottlesResponse');
    if ($this->scannedBottleHistory !== null) {
      if (!is_array($this->scannedBottleHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scannedBottleHistory', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->scannedBottleHistory));
        {
          foreach ($this->scannedBottleHistory as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RatedBottlesResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\BottleInfo[]
   */
  public $ratedBottleHistory = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ratedBottleHistory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\BottleInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ratedBottleHistory'])) {
        $this->ratedBottleHistory = $vals['ratedBottleHistory'];
      }
    }
  }

  public function getName() {
    return 'RatedBottlesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->ratedBottleHistory = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \wineMateThrift\BottleInfo();
              $xfer += $elem33->read($input);
              $this->ratedBottleHistory []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RatedBottlesResponse');
    if ($this->ratedBottleHistory !== null) {
      if (!is_array($this->ratedBottleHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ratedBottleHistory', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ratedBottleHistory));
        {
          foreach ($this->ratedBottleHistory as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AllBottlesRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $countryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'countryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['countryId'])) {
        $this->countryId = $vals['countryId'];
      }
    }
  }

  public function getName() {
    return 'AllBottlesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AllBottlesRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryId !== null) {
      $xfer += $output->writeFieldBegin('countryId', TType::I32, 2);
      $xfer += $output->writeI32($this->countryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AllBottlesResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\BottleInfo[]
   */
  public $allBottles = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'allBottles',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\BottleInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['allBottles'])) {
        $this->allBottles = $vals['allBottles'];
      }
    }
  }

  public function getName() {
    return 'AllBottlesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->allBottles = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \wineMateThrift\BottleInfo();
              $xfer += $elem40->read($input);
              $this->allBottles []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AllBottlesResponse');
    if ($this->allBottles !== null) {
      if (!is_array($this->allBottles)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('allBottles', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->allBottles));
        {
          foreach ($this->allBottles as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewsFeedRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $countryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'countryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['countryId'])) {
        $this->countryId = $vals['countryId'];
      }
    }
  }

  public function getName() {
    return 'NewsFeedRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewsFeedRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryId !== null) {
      $xfer += $output->writeFieldBegin('countryId', TType::I32, 2);
      $xfer += $output->writeI32($this->countryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewsFeedData {
  static $_TSPEC;

  /**
   * @var int
   */
  public $feedType = null;
  /**
   * @var string
   */
  public $authorName = null;
  /**
   * @var string
   */
  public $feedTitle = null;
  /**
   * @var string
   */
  public $contentTitle = null;
  /**
   * @var string
   */
  public $contentAbstract = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var string
   */
  public $picUrl = null;
  /**
   * @var string
   */
  public $contentUrl = null;
  /**
   * @var string
   */
  public $authorUrl = null;
  /**
   * @var \wineMateThrift\BottleInfo
   */
  public $bottleInfo = null;
  /**
   * @var int
   */
  public $userid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'authorName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'feedTitle',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'contentTitle',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'contentAbstract',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'picUrl',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'contentUrl',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'authorUrl',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'bottleInfo',
          'type' => TType::STRUCT,
          'class' => '\wineMateThrift\BottleInfo',
          ),
        11 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['feedType'])) {
        $this->feedType = $vals['feedType'];
      }
      if (isset($vals['authorName'])) {
        $this->authorName = $vals['authorName'];
      }
      if (isset($vals['feedTitle'])) {
        $this->feedTitle = $vals['feedTitle'];
      }
      if (isset($vals['contentTitle'])) {
        $this->contentTitle = $vals['contentTitle'];
      }
      if (isset($vals['contentAbstract'])) {
        $this->contentAbstract = $vals['contentAbstract'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['picUrl'])) {
        $this->picUrl = $vals['picUrl'];
      }
      if (isset($vals['contentUrl'])) {
        $this->contentUrl = $vals['contentUrl'];
      }
      if (isset($vals['authorUrl'])) {
        $this->authorUrl = $vals['authorUrl'];
      }
      if (isset($vals['bottleInfo'])) {
        $this->bottleInfo = $vals['bottleInfo'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
    }
  }

  public function getName() {
    return 'NewsFeedData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->feedType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentAbstract);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->bottleInfo = new \wineMateThrift\BottleInfo();
            $xfer += $this->bottleInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewsFeedData');
    if ($this->feedType !== null) {
      $xfer += $output->writeFieldBegin('feedType', TType::I32, 1);
      $xfer += $output->writeI32($this->feedType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorName !== null) {
      $xfer += $output->writeFieldBegin('authorName', TType::STRING, 2);
      $xfer += $output->writeString($this->authorName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedTitle !== null) {
      $xfer += $output->writeFieldBegin('feedTitle', TType::STRING, 3);
      $xfer += $output->writeString($this->feedTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentTitle !== null) {
      $xfer += $output->writeFieldBegin('contentTitle', TType::STRING, 4);
      $xfer += $output->writeString($this->contentTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentAbstract !== null) {
      $xfer += $output->writeFieldBegin('contentAbstract', TType::STRING, 5);
      $xfer += $output->writeString($this->contentAbstract);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 6);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picUrl !== null) {
      $xfer += $output->writeFieldBegin('picUrl', TType::STRING, 7);
      $xfer += $output->writeString($this->picUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentUrl !== null) {
      $xfer += $output->writeFieldBegin('contentUrl', TType::STRING, 8);
      $xfer += $output->writeString($this->contentUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorUrl !== null) {
      $xfer += $output->writeFieldBegin('authorUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->authorUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bottleInfo !== null) {
      if (!is_object($this->bottleInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bottleInfo', TType::STRUCT, 10);
      $xfer += $this->bottleInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 11);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewsFeedResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\NewsFeedData[]
   */
  public $response = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'response',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\NewsFeedData',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['response'])) {
        $this->response = $vals['response'];
      }
    }
  }

  public function getName() {
    return 'NewsFeedResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->response = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \wineMateThrift\NewsFeedData();
              $xfer += $elem47->read($input);
              $this->response []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewsFeedResponse');
    if ($this->response !== null) {
      if (!is_array($this->response)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('response', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->response));
        {
          foreach ($this->response as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WechatLoginInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $openId = null;
  /**
   * @var string
   */
  public $unionId = null;
  /**
   * @var string
   */
  public $originJsonFromWechat = null;
  /**
   * @var string
   */
  public $accessToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'unionId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'originJsonFromWechat',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'accessToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openId'])) {
        $this->openId = $vals['openId'];
      }
      if (isset($vals['unionId'])) {
        $this->unionId = $vals['unionId'];
      }
      if (isset($vals['originJsonFromWechat'])) {
        $this->originJsonFromWechat = $vals['originJsonFromWechat'];
      }
      if (isset($vals['accessToken'])) {
        $this->accessToken = $vals['accessToken'];
      }
    }
  }

  public function getName() {
    return 'WechatLoginInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->originJsonFromWechat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WechatLoginInfo');
    if ($this->openId !== null) {
      $xfer += $output->writeFieldBegin('openId', TType::STRING, 1);
      $xfer += $output->writeString($this->openId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unionId !== null) {
      $xfer += $output->writeFieldBegin('unionId', TType::STRING, 2);
      $xfer += $output->writeString($this->unionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->originJsonFromWechat !== null) {
      $xfer += $output->writeFieldBegin('originJsonFromWechat', TType::STRING, 3);
      $xfer += $output->writeString($this->originJsonFromWechat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessToken !== null) {
      $xfer += $output->writeFieldBegin('accessToken', TType::STRING, 4);
      $xfer += $output->writeString($this->accessToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineryInfoRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $wineryName = null;
  /**
   * @var int
   */
  public $countryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineryName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'countryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineryName'])) {
        $this->wineryName = $vals['wineryName'];
      }
      if (isset($vals['countryId'])) {
        $this->countryId = $vals['countryId'];
      }
    }
  }

  public function getName() {
    return 'WineryInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineryInfoRequest');
    if ($this->wineryName !== null) {
      $xfer += $output->writeFieldBegin('wineryName', TType::STRING, 1);
      $xfer += $output->writeString($this->wineryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryId !== null) {
      $xfer += $output->writeFieldBegin('countryId', TType::I32, 2);
      $xfer += $output->writeI32($this->countryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineryInfoResponseSingleItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var string
   */
  public $wineName = null;
  /**
   * @var string
   */
  public $winePicUrl = null;
  /**
   * @var string
   */
  public $year = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'wineName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'winePicUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'year',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['wineName'])) {
        $this->wineName = $vals['wineName'];
      }
      if (isset($vals['winePicUrl'])) {
        $this->winePicUrl = $vals['winePicUrl'];
      }
      if (isset($vals['year'])) {
        $this->year = $vals['year'];
      }
    }
  }

  public function getName() {
    return 'WineryInfoResponseSingleItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->winePicUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineryInfoResponseSingleItem');
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 1);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineName !== null) {
      $xfer += $output->writeFieldBegin('wineName', TType::STRING, 2);
      $xfer += $output->writeString($this->wineName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->winePicUrl !== null) {
      $xfer += $output->writeFieldBegin('winePicUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->winePicUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->year !== null) {
      $xfer += $output->writeFieldBegin('year', TType::STRING, 4);
      $xfer += $output->writeString($this->year);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineryInfoSingleContent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $briefText = null;
  /**
   * @var string
   */
  public $url = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'briefText',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['briefText'])) {
        $this->briefText = $vals['briefText'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
    }
  }

  public function getName() {
    return 'WineryInfoSingleContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->briefText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineryInfoSingleContent');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->briefText !== null) {
      $xfer += $output->writeFieldBegin('briefText', TType::STRING, 2);
      $xfer += $output->writeString($this->briefText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 3);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WineryInfoResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\WineryInfoResponseSingleItem[]
   */
  public $wineryWineList = null;
  /**
   * @var \wineMateThrift\WineryInfoSingleContent[]
   */
  public $wineryInfoContents = null;
  /**
   * @var string[]
   */
  public $wineryPhotoUrls = null;
  /**
   * @var string
   */
  public $wineryWebsiteUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineryWineList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\WineryInfoResponseSingleItem',
            ),
          ),
        2 => array(
          'var' => 'wineryInfoContents',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\WineryInfoSingleContent',
            ),
          ),
        3 => array(
          'var' => 'wineryPhotoUrls',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'wineryWebsiteUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineryWineList'])) {
        $this->wineryWineList = $vals['wineryWineList'];
      }
      if (isset($vals['wineryInfoContents'])) {
        $this->wineryInfoContents = $vals['wineryInfoContents'];
      }
      if (isset($vals['wineryPhotoUrls'])) {
        $this->wineryPhotoUrls = $vals['wineryPhotoUrls'];
      }
      if (isset($vals['wineryWebsiteUrl'])) {
        $this->wineryWebsiteUrl = $vals['wineryWebsiteUrl'];
      }
    }
  }

  public function getName() {
    return 'WineryInfoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->wineryWineList = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \wineMateThrift\WineryInfoResponseSingleItem();
              $xfer += $elem54->read($input);
              $this->wineryWineList []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->wineryInfoContents = array();
            $_size55 = 0;
            $_etype58 = 0;
            $xfer += $input->readListBegin($_etype58, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $elem60 = null;
              $elem60 = new \wineMateThrift\WineryInfoSingleContent();
              $xfer += $elem60->read($input);
              $this->wineryInfoContents []= $elem60;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->wineryPhotoUrls = array();
            $_size61 = 0;
            $_etype64 = 0;
            $xfer += $input->readListBegin($_etype64, $_size61);
            for ($_i65 = 0; $_i65 < $_size61; ++$_i65)
            {
              $elem66 = null;
              $xfer += $input->readString($elem66);
              $this->wineryPhotoUrls []= $elem66;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryWebsiteUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WineryInfoResponse');
    if ($this->wineryWineList !== null) {
      if (!is_array($this->wineryWineList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('wineryWineList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->wineryWineList));
        {
          foreach ($this->wineryWineList as $iter67)
          {
            $xfer += $iter67->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryInfoContents !== null) {
      if (!is_array($this->wineryInfoContents)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('wineryInfoContents', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->wineryInfoContents));
        {
          foreach ($this->wineryInfoContents as $iter68)
          {
            $xfer += $iter68->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryPhotoUrls !== null) {
      if (!is_array($this->wineryPhotoUrls)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('wineryPhotoUrls', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->wineryPhotoUrls));
        {
          foreach ($this->wineryPhotoUrls as $iter69)
          {
            $xfer += $output->writeString($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryWebsiteUrl !== null) {
      $xfer += $output->writeFieldBegin('wineryWebsiteUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->wineryWebsiteUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendListRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'FriendListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendListRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $userName = null;
  /**
   * @var string
   */
  public $sex = null;
  /**
   * @var int
   */
  public $ratingNumbers = null;
  /**
   * @var bool
   */
  public $isFollowing = null;
  /**
   * @var bool
   */
  public $isFollowed = null;
  /**
   * @var string
   */
  public $lastName = null;
  /**
   * @var string
   */
  public $firstName = null;
  /**
   * @var string
   */
  public $photoUrl = null;
  /**
   * @var int
   */
  public $thirdParty = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sex',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ratingNumbers',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'isFollowing',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'isFollowed',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'lastName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'firstName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'photoUrl',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'thirdParty',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['ratingNumbers'])) {
        $this->ratingNumbers = $vals['ratingNumbers'];
      }
      if (isset($vals['isFollowing'])) {
        $this->isFollowing = $vals['isFollowing'];
      }
      if (isset($vals['isFollowed'])) {
        $this->isFollowed = $vals['isFollowed'];
      }
      if (isset($vals['lastName'])) {
        $this->lastName = $vals['lastName'];
      }
      if (isset($vals['firstName'])) {
        $this->firstName = $vals['firstName'];
      }
      if (isset($vals['photoUrl'])) {
        $this->photoUrl = $vals['photoUrl'];
      }
      if (isset($vals['thirdParty'])) {
        $this->thirdParty = $vals['thirdParty'];
      }
    }
  }

  public function getName() {
    return 'FriendInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ratingNumbers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFollowing);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFollowed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->firstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->thirdParty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendInfo');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 2);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::STRING, 3);
      $xfer += $output->writeString($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ratingNumbers !== null) {
      $xfer += $output->writeFieldBegin('ratingNumbers', TType::I32, 4);
      $xfer += $output->writeI32($this->ratingNumbers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFollowing !== null) {
      $xfer += $output->writeFieldBegin('isFollowing', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isFollowing);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFollowed !== null) {
      $xfer += $output->writeFieldBegin('isFollowed', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isFollowed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastName !== null) {
      $xfer += $output->writeFieldBegin('lastName', TType::STRING, 7);
      $xfer += $output->writeString($this->lastName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstName !== null) {
      $xfer += $output->writeFieldBegin('firstName', TType::STRING, 8);
      $xfer += $output->writeString($this->firstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoUrl !== null) {
      $xfer += $output->writeFieldBegin('photoUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->photoUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thirdParty !== null) {
      $xfer += $output->writeFieldBegin('thirdParty', TType::I32, 10);
      $xfer += $output->writeI32($this->thirdParty);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendListResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\FriendInfo[]
   */
  public $friendList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'friendList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\FriendInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['friendList'])) {
        $this->friendList = $vals['friendList'];
      }
    }
  }

  public function getName() {
    return 'FriendListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->friendList = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \wineMateThrift\FriendInfo();
              $xfer += $elem75->read($input);
              $this->friendList []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendListResponse');
    if ($this->friendList !== null) {
      if (!is_array($this->friendList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('friendList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->friendList));
        {
          foreach ($this->friendList as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyFollowingListResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\FriendInfo[]
   */
  public $myFollowingList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'myFollowingList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\FriendInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['myFollowingList'])) {
        $this->myFollowingList = $vals['myFollowingList'];
      }
    }
  }

  public function getName() {
    return 'MyFollowingListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->myFollowingList = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $elem82 = new \wineMateThrift\FriendInfo();
              $xfer += $elem82->read($input);
              $this->myFollowingList []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyFollowingListResponse');
    if ($this->myFollowingList !== null) {
      if (!is_array($this->myFollowingList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('myFollowingList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->myFollowingList));
        {
          foreach ($this->myFollowingList as $iter83)
          {
            $xfer += $iter83->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyFollowersListResponse {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\FriendInfo[]
   */
  public $myFollowersList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'myFollowersList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\FriendInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['myFollowersList'])) {
        $this->myFollowersList = $vals['myFollowersList'];
      }
    }
  }

  public function getName() {
    return 'MyFollowersListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->myFollowersList = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \wineMateThrift\FriendInfo();
              $xfer += $elem89->read($input);
              $this->myFollowersList []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyFollowersListResponse');
    if ($this->myFollowersList !== null) {
      if (!is_array($this->myFollowersList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('myFollowersList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->myFollowersList));
        {
          foreach ($this->myFollowersList as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyProfile {
  static $_TSPEC;

  /**
   * @var \wineMateThrift\User
   */
  public $user = null;
  /**
   * @var int
   */
  public $followerNumber = null;
  /**
   * @var int
   */
  public $followingNumber = null;
  /**
   * @var int
   */
  public $ratedNumber = null;
  /**
   * @var bool
   */
  public $isFollowing = null;
  /**
   * @var bool
   */
  public $isFollowed = null;
  /**
   * @var bool
   */
  public $hideProfileToStranger = null;
  /**
   * @var int
   */
  public $wishlistNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user',
          'type' => TType::STRUCT,
          'class' => '\wineMateThrift\User',
          ),
        2 => array(
          'var' => 'followerNumber',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'followingNumber',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ratedNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'isFollowing',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'isFollowed',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'hideProfileToStranger',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'wishlistNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
      if (isset($vals['followerNumber'])) {
        $this->followerNumber = $vals['followerNumber'];
      }
      if (isset($vals['followingNumber'])) {
        $this->followingNumber = $vals['followingNumber'];
      }
      if (isset($vals['ratedNumber'])) {
        $this->ratedNumber = $vals['ratedNumber'];
      }
      if (isset($vals['isFollowing'])) {
        $this->isFollowing = $vals['isFollowing'];
      }
      if (isset($vals['isFollowed'])) {
        $this->isFollowed = $vals['isFollowed'];
      }
      if (isset($vals['hideProfileToStranger'])) {
        $this->hideProfileToStranger = $vals['hideProfileToStranger'];
      }
      if (isset($vals['wishlistNumber'])) {
        $this->wishlistNumber = $vals['wishlistNumber'];
      }
    }
  }

  public function getName() {
    return 'MyProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->user = new \wineMateThrift\User();
            $xfer += $this->user->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followerNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followingNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ratedNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFollowing);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFollowed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hideProfileToStranger);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wishlistNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyProfile');
    if ($this->user !== null) {
      if (!is_object($this->user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user', TType::STRUCT, 1);
      $xfer += $this->user->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followerNumber !== null) {
      $xfer += $output->writeFieldBegin('followerNumber', TType::I32, 2);
      $xfer += $output->writeI32($this->followerNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followingNumber !== null) {
      $xfer += $output->writeFieldBegin('followingNumber', TType::I32, 3);
      $xfer += $output->writeI32($this->followingNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ratedNumber !== null) {
      $xfer += $output->writeFieldBegin('ratedNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->ratedNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFollowing !== null) {
      $xfer += $output->writeFieldBegin('isFollowing', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isFollowing);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFollowed !== null) {
      $xfer += $output->writeFieldBegin('isFollowed', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isFollowed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hideProfileToStranger !== null) {
      $xfer += $output->writeFieldBegin('hideProfileToStranger', TType::BOOL, 7);
      $xfer += $output->writeBool($this->hideProfileToStranger);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wishlistNumber !== null) {
      $xfer += $output->writeFieldBegin('wishlistNumber', TType::I32, 8);
      $xfer += $output->writeI32($this->wishlistNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddRewardPointsRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $useAction = null;
  /**
   * @var int
   */
  public $wineId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'useAction',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['useAction'])) {
        $this->useAction = $vals['useAction'];
      }
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
    }
  }

  public function getName() {
    return 'AddRewardPointsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useAction);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddRewardPointsRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useAction !== null) {
      $xfer += $output->writeFieldBegin('useAction', TType::I32, 2);
      $xfer += $output->writeI32($this->useAction);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 3);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserPhotoResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $userPhotoUrl = null;
  /**
   * @var bool
   */
  public $alreadyUploaded = null;
  /**
   * @var string
   */
  public $receiverScriptUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userPhotoUrl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'alreadyUploaded',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'receiverScriptUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userPhotoUrl'])) {
        $this->userPhotoUrl = $vals['userPhotoUrl'];
      }
      if (isset($vals['alreadyUploaded'])) {
        $this->alreadyUploaded = $vals['alreadyUploaded'];
      }
      if (isset($vals['receiverScriptUrl'])) {
        $this->receiverScriptUrl = $vals['receiverScriptUrl'];
      }
    }
  }

  public function getName() {
    return 'UserPhotoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhotoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->alreadyUploaded);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiverScriptUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserPhotoResponse');
    if ($this->userPhotoUrl !== null) {
      $xfer += $output->writeFieldBegin('userPhotoUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->userPhotoUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alreadyUploaded !== null) {
      $xfer += $output->writeFieldBegin('alreadyUploaded', TType::BOOL, 2);
      $xfer += $output->writeBool($this->alreadyUploaded);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverScriptUrl !== null) {
      $xfer += $output->writeFieldBegin('receiverScriptUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->receiverScriptUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyWishListResponse {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \wineMateThrift\BottleInfo[]
   */
  public $wishList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'wishList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\BottleInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['wishList'])) {
        $this->wishList = $vals['wishList'];
      }
    }
  }

  public function getName() {
    return 'MyWishListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->wishList = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $elem96 = new \wineMateThrift\BottleInfo();
              $xfer += $elem96->read($input);
              $this->wishList []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyWishListResponse');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wishList !== null) {
      if (!is_array($this->wishList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('wishList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->wishList));
        {
          foreach ($this->wishList as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddToWishlistRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var bool
   */
  public $enabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'enabled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['enabled'])) {
        $this->enabled = $vals['enabled'];
      }
    }
  }

  public function getName() {
    return 'AddToWishlistRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddToWishlistRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 2);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enabled !== null) {
      $xfer += $output->writeFieldBegin('enabled', TType::BOOL, 3);
      $xfer += $output->writeBool($this->enabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IsInWishlistResponse {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var bool
   */
  public $isInList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'isInList',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['isInList'])) {
        $this->isInList = $vals['isInList'];
      }
    }
  }

  public function getName() {
    return 'IsInWishlistResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isInList);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IsInWishlistResponse');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 1);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isInList !== null) {
      $xfer += $output->writeFieldBegin('isInList', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isInList);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RewardSingleItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var string
   */
  public $wineName = null;
  /**
   * @var string
   */
  public $winePicUrl = null;
  /**
   * @var string
   */
  public $year = null;
  /**
   * @var string
   */
  public $region = null;
  /**
   * @var int
   */
  public $points = null;
  /**
   * @var bool
   */
  public $outOfStock = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'wineName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'winePicUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'year',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'region',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'points',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'outOfStock',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['wineName'])) {
        $this->wineName = $vals['wineName'];
      }
      if (isset($vals['winePicUrl'])) {
        $this->winePicUrl = $vals['winePicUrl'];
      }
      if (isset($vals['year'])) {
        $this->year = $vals['year'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
      if (isset($vals['points'])) {
        $this->points = $vals['points'];
      }
      if (isset($vals['outOfStock'])) {
        $this->outOfStock = $vals['outOfStock'];
      }
    }
  }

  public function getName() {
    return 'RewardSingleItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->winePicUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->points);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->outOfStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RewardSingleItem');
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 1);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineName !== null) {
      $xfer += $output->writeFieldBegin('wineName', TType::STRING, 2);
      $xfer += $output->writeString($this->wineName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->winePicUrl !== null) {
      $xfer += $output->writeFieldBegin('winePicUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->winePicUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->year !== null) {
      $xfer += $output->writeFieldBegin('year', TType::STRING, 4);
      $xfer += $output->writeString($this->year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::STRING, 5);
      $xfer += $output->writeString($this->region);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->points !== null) {
      $xfer += $output->writeFieldBegin('points', TType::I32, 6);
      $xfer += $output->writeI32($this->points);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->outOfStock !== null) {
      $xfer += $output->writeFieldBegin('outOfStock', TType::BOOL, 7);
      $xfer += $output->writeBool($this->outOfStock);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RewardItemRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $wineryName = null;
  /**
   * @var int
   */
  public $countryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'wineryName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'countryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['wineryName'])) {
        $this->wineryName = $vals['wineryName'];
      }
      if (isset($vals['countryId'])) {
        $this->countryId = $vals['countryId'];
      }
    }
  }

  public function getName() {
    return 'RewardItemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wineryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RewardItemRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wineryName !== null) {
      $xfer += $output->writeFieldBegin('wineryName', TType::STRING, 2);
      $xfer += $output->writeString($this->wineryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryId !== null) {
      $xfer += $output->writeFieldBegin('countryId', TType::I32, 3);
      $xfer += $output->writeI32($this->countryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RewardItemResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $currentPoints = null;
  /**
   * @var \wineMateThrift\RewardSingleItem[]
   */
  public $rewardItemList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'currentPoints',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rewardItemList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\RewardSingleItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['currentPoints'])) {
        $this->currentPoints = $vals['currentPoints'];
      }
      if (isset($vals['rewardItemList'])) {
        $this->rewardItemList = $vals['rewardItemList'];
      }
    }
  }

  public function getName() {
    return 'RewardItemResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentPoints);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->rewardItemList = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readListBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $elem103 = new \wineMateThrift\RewardSingleItem();
              $xfer += $elem103->read($input);
              $this->rewardItemList []= $elem103;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RewardItemResponse');
    if ($this->currentPoints !== null) {
      $xfer += $output->writeFieldBegin('currentPoints', TType::I32, 1);
      $xfer += $output->writeI32($this->currentPoints);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardItemList !== null) {
      if (!is_array($this->rewardItemList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rewardItemList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rewardItemList));
        {
          foreach ($this->rewardItemList as $iter104)
          {
            $xfer += $iter104->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Address {
  static $_TSPEC;

  /**
   * @var string
   */
  public $province = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $street = null;
  /**
   * @var string
   */
  public $zipCode = null;
  /**
   * @var string
   */
  public $phoneNumber = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $fullName = null;
  /**
   * @var string
   */
  public $country = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'street',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'zipCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'phoneNumber',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'fullName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['street'])) {
        $this->street = $vals['street'];
      }
      if (isset($vals['zipCode'])) {
        $this->zipCode = $vals['zipCode'];
      }
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['fullName'])) {
        $this->fullName = $vals['fullName'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
    }
  }

  public function getName() {
    return 'Address';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->street);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zipCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Address');
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 1);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 2);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->street !== null) {
      $xfer += $output->writeFieldBegin('street', TType::STRING, 3);
      $xfer += $output->writeString($this->street);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zipCode !== null) {
      $xfer += $output->writeFieldBegin('zipCode', TType::STRING, 4);
      $xfer += $output->writeString($this->zipCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', TType::STRING, 5);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 6);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fullName !== null) {
      $xfer += $output->writeFieldBegin('fullName', TType::STRING, 7);
      $xfer += $output->writeString($this->fullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 8);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RewardRedeemSingleItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $wineId = null;
  /**
   * @var int
   */
  public $quantity = null;
  /**
   * @var int
   */
  public $points = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wineId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'quantity',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'points',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wineId'])) {
        $this->wineId = $vals['wineId'];
      }
      if (isset($vals['quantity'])) {
        $this->quantity = $vals['quantity'];
      }
      if (isset($vals['points'])) {
        $this->points = $vals['points'];
      }
    }
  }

  public function getName() {
    return 'RewardRedeemSingleItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wineId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->points);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RewardRedeemSingleItem');
    if ($this->wineId !== null) {
      $xfer += $output->writeFieldBegin('wineId', TType::I32, 1);
      $xfer += $output->writeI32($this->wineId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quantity !== null) {
      $xfer += $output->writeFieldBegin('quantity', TType::I32, 2);
      $xfer += $output->writeI32($this->quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->points !== null) {
      $xfer += $output->writeFieldBegin('points', TType::I32, 3);
      $xfer += $output->writeI32($this->points);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RewardRedeemRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var \wineMateThrift\RewardRedeemSingleItem[]
   */
  public $RewardRedeemItems = null;
  /**
   * @var \wineMateThrift\Address
   */
  public $address = null;
  /**
   * @var string
   */
  public $trackingNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'RewardRedeemItems',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\wineMateThrift\RewardRedeemSingleItem',
            ),
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRUCT,
          'class' => '\wineMateThrift\Address',
          ),
        4 => array(
          'var' => 'trackingNumber',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['RewardRedeemItems'])) {
        $this->RewardRedeemItems = $vals['RewardRedeemItems'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['trackingNumber'])) {
        $this->trackingNumber = $vals['trackingNumber'];
      }
    }
  }

  public function getName() {
    return 'RewardRedeemRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->RewardRedeemItems = array();
            $_size105 = 0;
            $_etype108 = 0;
            $xfer += $input->readListBegin($_etype108, $_size105);
            for ($_i109 = 0; $_i109 < $_size105; ++$_i109)
            {
              $elem110 = null;
              $elem110 = new \wineMateThrift\RewardRedeemSingleItem();
              $xfer += $elem110->read($input);
              $this->RewardRedeemItems []= $elem110;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->address = new \wineMateThrift\Address();
            $xfer += $this->address->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trackingNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RewardRedeemRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RewardRedeemItems !== null) {
      if (!is_array($this->RewardRedeemItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RewardRedeemItems', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->RewardRedeemItems));
        {
          foreach ($this->RewardRedeemItems as $iter111)
          {
            $xfer += $iter111->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      if (!is_object($this->address)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('address', TType::STRUCT, 3);
      $xfer += $this->address->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trackingNumber !== null) {
      $xfer += $output->writeFieldBegin('trackingNumber', TType::STRING, 4);
      $xfer += $output->writeString($this->trackingNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RewardRedeemResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $resp_code = null;
  /**
   * @var int
   */
  public $remainingPoints = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'resp_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'remainingPoints',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['resp_code'])) {
        $this->resp_code = $vals['resp_code'];
      }
      if (isset($vals['remainingPoints'])) {
        $this->remainingPoints = $vals['remainingPoints'];
      }
    }
  }

  public function getName() {
    return 'RewardRedeemResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resp_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remainingPoints);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RewardRedeemResponse');
    if ($this->resp_code !== null) {
      $xfer += $output->writeFieldBegin('resp_code', TType::I32, 1);
      $xfer += $output->writeI32($this->resp_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainingPoints !== null) {
      $xfer += $output->writeFieldBegin('remainingPoints', TType::I32, 2);
      $xfer += $output->writeI32($this->remainingPoints);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


